<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>leetcode on ZhengWei Liu&#39;s blogs</title>
    <link>https://blog.zhengweiliu.com/categories/leetcode/</link>
    <description>Recent content in leetcode on ZhengWei Liu&#39;s blogs</description>
    <image>
      <url>https://blog.zhengweiliu.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.zhengweiliu.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 24 Dec 2022 15:05:27 +0000</lastBuildDate><atom:link href="https://blog.zhengweiliu.com/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[leetcode][Python][Concurrency][Medium] 1226. The Dining Philosophers</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/concurrency/the-dining-philosophers/</link>
      <pubDate>Sat, 24 Dec 2022 15:05:27 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/concurrency/the-dining-philosophers/</guid>
      <description>Description Five silent philosophers sit at a round table with bowls of spaghetti. Forks are placed between each pair of adjacent philosophers.
Each philosopher must alternately think and eat. However, a philosopher can only eat spaghetti when they have both left and right forks. Each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher.</description>
    </item>
    
    <item>
      <title>[leetcode][Python][Concurrency][Medium] 1195. Fizz Buzz Multithreaded</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/concurrency/fizz-buzz-multithreaded/</link>
      <pubDate>Sat, 24 Dec 2022 05:25:42 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/concurrency/fizz-buzz-multithreaded/</guid>
      <description>Description You have the four functions:
printFizz that prints the word &amp;quot;fizz&amp;quot; to the console, printBuzz that prints the word &amp;quot;buzz&amp;quot; to the console, printFizzBuzz that prints the word &amp;quot;fizzbuzz&amp;quot; to the console, and printNumber that prints a given integer to the console. You are given an instance of the class FizzBuzz that has four functions: fizz, buzz, fizzbuzz and number. The same instance of FizzBuzz will be passed to four different threads:</description>
    </item>
    
    <item>
      <title>[leetcode][Python][Concurrency][Medium] 1115. Print FooBar Alternately</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/concurrency/print-foobar-alternately/</link>
      <pubDate>Sat, 24 Dec 2022 04:07:08 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/concurrency/print-foobar-alternately/</guid>
      <description>Description Suppose you are given the following code:
class FooBar { public void foo() { for (int i = 0; i &amp;lt; n; i++) { print(&amp;#34;foo&amp;#34;); } } public void bar() { for (int i = 0; i &amp;lt; n; i++) { print(&amp;#34;bar&amp;#34;); } } } The same instance of FooBar will be passed to two different threads:
thread A will call foo(), while thread B will call bar(). Modify the given program to output &amp;quot;foobar&amp;quot; n times.</description>
    </item>
    
    <item>
      <title>[leetcode][Python][Concurrency][Medium] 1188. Design Bounded Blocking Queue</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/concurrency/design-bounded-blocking-queue/</link>
      <pubDate>Thu, 22 Dec 2022 07:45:19 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/concurrency/design-bounded-blocking-queue/</guid>
      <description>Description Implement a thread-safe bounded blocking queue that has the following methods:
BoundedBlockingQueue(int capacity) The constructor initializes the queue with a maximum capacity. void enqueue(int element) Adds an element to the front of the queue. If the queue is full, the calling thread is blocked until the queue is no longer full. int dequeue() Returns the element at the rear of the queue and removes it. If the queue is empty, the calling thread is blocked until the queue is no longer empty.</description>
    </item>
    
    <item>
      <title>[leetcode][Python][Concurrency][Medium] 1242. Web Crawler Multithreaded</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/concurrency/web-crawler-multithreaded/</link>
      <pubDate>Thu, 22 Dec 2022 06:53:34 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/concurrency/web-crawler-multithreaded/</guid>
      <description>Description Given a URL startUrl and an interface HtmlParser, implement a Multi-threaded web crawler to crawl all links that are under the same hostname as startUrl.
Return all URLs obtained by your web crawler in any order.
Your crawler should:
Start from the page: startUrl Call HtmlParser.getUrls(url) to get all URLs from a webpage of a given URL. Do not crawl the same link twice. Explore only the links that are under the same hostname as startUrl.</description>
    </item>
    
    <item>
      <title>[leetcode][Python][Concurrency][Easy] 1279. Traffic Light Controlled Intersection</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/concurrency/traffic-light-controlled-intersection/</link>
      <pubDate>Thu, 22 Dec 2022 03:40:12 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/concurrency/traffic-light-controlled-intersection/</guid>
      <description>Description There is an intersection of two roads. First road is road A where cars travel from North to South in direction 1 and from South to North in direction 2. Second road is road B where cars travel from West to East in direction 3 and from East to West in direction 4.
There is a traffic light located on each road before the intersection. A traffic light can either be green or red.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 2173. Longest Winning Streak</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/longest-winning-streak/</link>
      <pubDate>Sun, 18 Dec 2022 21:45:21 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/longest-winning-streak/</guid>
      <description>Description Table: Matches
+-------------+------+ | Column Name | Type | +-------------+------+ | player_id | int | | match_day | date | | result | enum | +-------------+------+ (player_id, match_day) is the primary key for this table. Each row of this table contains the ID of a player, the day of the match they played, and the result of that match. The result column is an ENUM type of (&amp;#39;Win&amp;#39;, &amp;#39;Draw&amp;#39;, &amp;#39;Lose&amp;#39;).</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 2474. Customers With Strictly Increasing Purchases</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/customers-with-strictly-increasing-purchases/</link>
      <pubDate>Sun, 18 Dec 2022 21:30:30 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/customers-with-strictly-increasing-purchases/</guid>
      <description>Description Table: Orders
+--------------+------+ | Column Name | Type | +--------------+------+ | order_id | int | | customer_id | int | | order_date | date | | price | int | +--------------+------+ order_id is the primary key for this table. Each row contains the id of an order, the id of customer that ordered it, the date of the order, and its price. Write an SQL query to report the IDs of the customers with the total purchases strictly increasing yearly.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 2362. Generate the Invoice</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/generate-the-invoice/</link>
      <pubDate>Sun, 18 Dec 2022 21:10:22 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/generate-the-invoice/</guid>
      <description>Description Table: Products
+-------------+------+ | Column Name | Type | +-------------+------+ | product_id | int | | price | int | +-------------+------+ product_id is the primary key for this table. Each row in this table shows the ID of a product and the price of one unit. Table: Purchases
+-------------+------+ | Column Name | Type | +-------------+------+ | invoice_id | int | | product_id | int | | quantity | int | +-------------+------+ (invoice_id, product_id) is the primary key for this table.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 2199. Finding the Topic of Each Post</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/finding-the-topic-of-each-post/</link>
      <pubDate>Sun, 18 Dec 2022 20:54:39 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/finding-the-topic-of-each-post/</guid>
      <description>Description Table: Keywords
+-------------+---------+ | Column Name | Type | +-------------+---------+ | topic_id | int | | word | varchar | +-------------+---------+ (topic_id, word) is the primary key for this table. Each row of this table contains the id of a topic and a word that is used to express this topic. There may be more than one word to express the same topic and one word may be used to express multiple topics.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 2010. The Number of Seniors and Juniors to Join the Company II</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/the-number-of-seniors-and-juniors-to-join-the-company-ii/</link>
      <pubDate>Sat, 17 Dec 2022 00:11:43 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/the-number-of-seniors-and-juniors-to-join-the-company-ii/</guid>
      <description>Description Table: Candidates
+-------------+------+ | Column Name | Type | +-------------+------+ | employee_id | int | | experience | enum | | salary | int | +-------------+------+ employee_id is the primary key column for this table. experience is an enum with one of the values (&amp;#39;Senior&amp;#39;, &amp;#39;Junior&amp;#39;). Each row of this table indicates the id of a candidate, their monthly salary, and their experience. The salary of each candidate is guaranteed to be unique.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 2118. Build the Equation</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/build-the-equation/</link>
      <pubDate>Fri, 16 Dec 2022 23:57:37 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/build-the-equation/</guid>
      <description>Description Table: Terms
+-------------+------+ | Column Name | Type | +-------------+------+ | power | int | | factor | int | +-------------+------+ power is the primary key column for this table. Each row of this table contains information about one term of the equation. power is an integer in the range [0, 100]. factor is an integer in the range [-100, 100] and cannot be zero. You have a very powerful program that can solve any equation of one variable in the world.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard]2253. Dynamic Unpivoting of a Table</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/dynamic-unpivoting-of-a-table/</link>
      <pubDate>Fri, 16 Dec 2022 21:13:39 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/dynamic-unpivoting-of-a-table/</guid>
      <description>Description Table: Products
+-------------+---------+ | Column Name | Type | +-------------+---------+ | product_id | int | | store_name1 | int | | store_name2 | int | | : | int | | : | int | | : | int | | store_namen | int | +-------------+---------+ product_id is the primary key for this table. Each row in this table indicates the product&amp;#39;s price in n different stores. If the product is not available in a store, the price will be null in that store&amp;#39;s column.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1919. Leetcodify Similar Friends</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/leetcodify-similar-friends/</link>
      <pubDate>Fri, 16 Dec 2022 01:08:30 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/leetcodify-similar-friends/</guid>
      <description>Description Table: Listens
+-------------+---------+ | Column Name | Type | +-------------+---------+ | user_id | int | | song_id | int | | day | date | +-------------+---------+ There is no primary key for this table. It may contain duplicates. Each row of this table indicates that the user user_id listened to the song song_id on the day day. Table: Friendship
+---------------+---------+ | Column Name | Type | +---------------+---------+ | user1_id | int | | user2_id | int | +---------------+---------+ (user1_id, user2_id) is the primary key for this table.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1917. Leetcodify Friends Recommendations</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/leetcodify-friends-recommendations/</link>
      <pubDate>Thu, 15 Dec 2022 23:52:20 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/leetcodify-friends-recommendations/</guid>
      <description>Description Table: Listens
+-------------+---------+ | Column Name | Type | +-------------+---------+ | user_id | int | | song_id | int | | day | date | +-------------+---------+ There is no primary key for this table. It may contain duplicates. Each row of this table indicates that the user user_id listened to the song song_id on the day day. Table: Friendship
+---------------+---------+ | Column Name | Type | +---------------+---------+ | user1_id | int | | user2_id | int | +---------------+---------+ (user1_id, user2_id) is the primary key for this table.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1892. Page Recommendations II</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/page-recommendations-ii/</link>
      <pubDate>Thu, 15 Dec 2022 21:38:41 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/page-recommendations-ii/</guid>
      <description>Description Table: Friendship
+---------------+---------+ | Column Name | Type | +---------------+---------+ | user1_id | int | | user2_id | int | +---------------+---------+ (user1_id, user2_id) is the primary key for this table. Each row of this table indicates that the users user1_id and user2_id are friends. Table: Likes
+-------------+---------+ | Column Name | Type | +-------------+---------+ | user_id | int | | page_id | int | +-------------+---------+ (user_id, page_id) is the primary key for this table.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1767. Find the Subtasks That Did Not Execute</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/find-the-subtasks-that-did-not-execute/</link>
      <pubDate>Thu, 15 Dec 2022 17:53:09 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/find-the-subtasks-that-did-not-execute/</guid>
      <description>Description Table: Tasks
+----------------+---------+ | Column Name | Type | +----------------+---------+ | task_id | int | | subtasks_count | int | +----------------+---------+ task_id is the primary key for this table. Each row in this table indicates that task_id was divided into subtasks_count subtasks labeled from 1 to subtasks_count. It is guaranteed that 2 &amp;lt;= subtasks_count &amp;lt;= 20. Table: Executed
+---------------+---------+ | Column Name | Type | +---------------+---------+ | task_id | int | | subtask_id | int | +---------------+---------+ (task_id, subtask_id) is the primary key for this table.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1651. Hopper Company Queries III</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/hopper-company-queries-iii/</link>
      <pubDate>Thu, 15 Dec 2022 16:48:56 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/hopper-company-queries-iii/</guid>
      <description>Description Table: Drivers
+-------------+---------+ | Column Name | Type | +-------------+---------+ | driver_id | int | | join_date | date | +-------------+---------+ driver_id is the primary key for this table. Each row of this table contains the driver&amp;#39;s ID and the date they joined the Hopper company. Table: Rides
+--------------+---------+ | Column Name | Type | +--------------+---------+ | ride_id | int | | user_id | int | | requested_at | date | +--------------+---------+ ride_id is the primary key for this table.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1645. Hopper Company Queries II</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/hopper-company-queries-ii/</link>
      <pubDate>Thu, 15 Dec 2022 15:55:19 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/hopper-company-queries-ii/</guid>
      <description>Description Table: Drivers
+-------------+---------+ | Column Name | Type | +-------------+---------+ | driver_id | int | | join_date | date | +-------------+---------+ driver_id is the primary key for this table. Each row of this table contains the driver&amp;#39;s ID and the date they joined the Hopper company. Table: Rides
+--------------+---------+ | Column Name | Type | +--------------+---------+ | ride_id | int | | user_id | int | | requested_at | date | +--------------+---------+ ride_id is the primary key for this table.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1635. Hopper Company Queries I</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/hopper-company-queries-i/</link>
      <pubDate>Wed, 14 Dec 2022 08:28:10 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/hopper-company-queries-i/</guid>
      <description>Description Table: Drivers
+-------------+---------+ | Column Name | Type | +-------------+---------+ | driver_id | int | | join_date | date | +-------------+---------+ driver_id is the primary key for this table. Each row of this table contains the driver&amp;#39;s ID and the date they joined the Hopper company. Table: Rides
+--------------+---------+ | Column Name | Type | +--------------+---------+ | ride_id | int | | user_id | int | | requested_at | date | +--------------+---------+ ride_id is the primary key for this table.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1412. Find the Quiet Students in All Exams</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/find-the-quiet-students-in-all-exams/</link>
      <pubDate>Tue, 13 Dec 2022 01:08:00 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/find-the-quiet-students-in-all-exams/</guid>
      <description>Description Table: Student
+---------------------+---------+ | Column Name | Type | +---------------------+---------+ | student_id | int | | student_name | varchar | +---------------------+---------+ student_id is the primary key for this table. student_name is the name of the student. Table: Exam
+---------------+---------+ | Column Name | Type | +---------------+---------+ | exam_id | int | | student_id | int | | score | int | +---------------+---------+ (exam_id, student_id) is the primary key for this table.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1369. Get the Second Most Recent Activity</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/get-the-second-most-recent-activity/</link>
      <pubDate>Tue, 13 Dec 2022 00:10:04 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/get-the-second-most-recent-activity/</guid>
      <description>Description Table: UserActivity
+---------------+---------+ | Column Name | Type | +---------------+---------+ | username | varchar | | activity | varchar | | startDate | Date | | endDate | Date | +---------------+---------+ There is no primary key for this table. It may contain duplicates. This table contains information about the activity performed by each user in a period of time. A person with username performed an activity from startDate to endDate.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1336. Number of Transactions per Visit</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/number-of-transactions-per-visit/</link>
      <pubDate>Mon, 12 Dec 2022 16:38:05 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/number-of-transactions-per-visit/</guid>
      <description>Description Table: Visits
+---------------+---------+ | Column Name | Type | +---------------+---------+ | user_id | int | | visit_date | date | +---------------+---------+ (user_id, visit_date) is the primary key for this table. Each row of this table indicates that user_id has visited the bank in visit_date. Table: Transactions
+------------------+---------+ | Column Name | Type | +------------------+---------+ | user_id | int | | transaction_date | date | | amount | int | +------------------+---------+ There is no primary key for this table, it may contain duplicates.</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1225. Report Contiguous Dates</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/report-contiguous-dates/</link>
      <pubDate>Wed, 07 Dec 2022 02:38:30 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/report-contiguous-dates/</guid>
      <description>題目 Table: Failed +--------------+---------+ | Column Name | Type | +--------------+---------+ | fail_date | date | +--------------+---------+ fail_date is the primary key for this table. This table contains the days of failed tasks. Table: Succeeded +--------------+---------+ | Column Name | Type | +--------------+---------+ | success_date | date | +--------------+---------+ success_date is the primary key for this table. This table contains the days of succeeded tasks. A system is running</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 185. Department Top Three Salaries</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/department-top-three-salaries/</link>
      <pubDate>Tue, 06 Dec 2022 17:21:44 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/department-top-three-salaries/</guid>
      <description>題目 Table: Employee +--------------+---------+ | Column Name | Type | +--------------+---------+ | id | int | | name | varchar | | salary | int | | departmentId | int | +--------------+---------+ id is the primary key column for this table. departmentId is a foreign key of the ID from the Department table. Each row of this table indicates the ID, name, and salary of an employee. It also</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 262. Trips and Users</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/trips-and-users/</link>
      <pubDate>Tue, 06 Dec 2022 17:08:27 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/trips-and-users/</guid>
      <description>題目 Table: Trips +-------------+----------+ | Column Name | Type | +-------------+----------+ | id | int | | client_id | int | | driver_id | int | | city_id | int | | status | enum | | request_at | date | +-------------+----------+ id is the primary key for this table. The table holds all taxi trips. Each trip has a unique id, while client_id and driver_id are foreign keys</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 569. Median Employee Salary</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/median-employee-salary/</link>
      <pubDate>Tue, 06 Dec 2022 16:48:49 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/median-employee-salary/</guid>
      <description>題目 Table: Employee +--------------+---------+ | Column Name | Type | +--------------+---------+ | id | int | | company | varchar | | salary | int | +--------------+---------+ id is the primary key column for this table. Each row of this table indicates the company and the salary of one employee. Write an SQL query to find the rows that contain the median salary of each company. While calculating the</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 571. Find Median Given Frequency of Numbers</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/find-median-given-frequency-of-numbers/</link>
      <pubDate>Tue, 06 Dec 2022 16:31:02 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/find-median-given-frequency-of-numbers/</guid>
      <description>題目 Table: Numbers +-------------+------+ | Column Name | Type | +-------------+------+ | num | int | | frequency | int | +-------------+------+ num is the primary key for this table. Each row of this table shows the frequency of a number in the database. The median is the value separating the higher half from the lower half of a data sample. Write an SQL query to report the median</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 579. Find Cumulative Salary of an Employee</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/find-cumulative-salary-of-an-employee/</link>
      <pubDate>Tue, 06 Dec 2022 15:18:29 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/find-cumulative-salary-of-an-employee/</guid>
      <description>題目 Table: Employee +-------------+------+ | Column Name | Type | +-------------+------+ | id | int | | month | int | | salary | int | +-------------+------+ (id, month) is the primary key for this table. Each row in the table indicates the salary of an employee in one month during the year 2020. Write an SQL query to calculate the cumulative salary summary for every employee in a</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 601. Human Traffic of Stadium</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/human-traffic-of-stadium/</link>
      <pubDate>Tue, 06 Dec 2022 14:55:01 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/human-traffic-of-stadium/</guid>
      <description>題目 Table: Stadium +---------------+---------+ | Column Name | Type | +---------------+---------+ | id | int | | visit_date | date | | people | int | +---------------+---------+ visit_date is the primary key for this table. Each row of this table contains the visit date and visit id to the stadium with the number of people during the visit. No two rows will have the same visit_date, and as the</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 615. Average Salary: Departments VS Company</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/average-salary-departments-vs-company/</link>
      <pubDate>Tue, 06 Dec 2022 14:33:17 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/average-salary-departments-vs-company/</guid>
      <description>題目 Table: Salary +-------------+------+ | Column Name | Type | +-------------+------+ | id | int | | employee_id | int | | amount | int | | pay_date | date | +-------------+------+ id is the primary key column for this table. Each row of this table indicates the salary of an employee in one month. employee_id is a foreign key from the Employee table. Table: Employee +---------------+------+ | Column</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 618. Students Report By Geography</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/students-report-by-geography/</link>
      <pubDate>Tue, 06 Dec 2022 14:08:14 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/students-report-by-geography/</guid>
      <description>題目 Table: Student +-------------+---------+ | Column Name | Type | +-------------+---------+ | name | varchar | | continent | varchar | +-------------+---------+ There is no primary key for this table. It may contain duplicate rows. Each row of this table indicates the name of a student and the continent they came from. A school has students from Asia, Europe, and America. Write an SQL query to pivot the continent</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1097. Game Play Analysis V</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/game-play-analysis-v/</link>
      <pubDate>Tue, 06 Dec 2022 13:48:34 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/game-play-analysis-v/</guid>
      <description>題目 Table: Activity +--------------+---------+ | Column Name | Type | +--------------+---------+ | player_id | int | | device_id | int | | event_date | date | | games_played | int | +--------------+---------+ (player_id, event_date) is the primary key of this table. This table shows the activity of players of some games. Each row is a record of a player who logged in and played a number of games (possibly</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1127. User Purchase Platform</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/user-purchase-platform/</link>
      <pubDate>Tue, 06 Dec 2022 13:21:25 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/user-purchase-platform/</guid>
      <description>題目 Table: Spending +-------------+---------+ | Column Name | Type | +-------------+---------+ | user_id | int | | spend_date | date | | platform | enum | | amount | int | +-------------+---------+ The table logs the history of the spending of users that make purchases from an online shopping website that has a desktop and a mobile application. (user_id, spend_date, platform) is the primary key of this table. The</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1159. Market Analysis II</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/market-analysis-ii/</link>
      <pubDate>Tue, 06 Dec 2022 12:27:16 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/market-analysis-ii/</guid>
      <description>題目 Table: Users +----------------+---------+ | Column Name | Type | +----------------+---------+ | user_id | int | | join_date | date | | favorite_brand | varchar | +----------------+---------+ user_id is the primary key of this table. This table has the info of the users of an online shopping website where users can sell and buy items. Table: Orders +---------------+---------+ | Column Name | Type | +---------------+---------+ | order_id | int</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1194. Tournament Winners</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/tournament-winners/</link>
      <pubDate>Tue, 06 Dec 2022 09:28:54 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/tournament-winners/</guid>
      <description>題目 Table: Players +-------------+-------+ | Column Name | Type | +-------------+-------+ | player_id | int | | group_id | int | +-------------+-------+ player_id is the primary key of this table. Each row of this table indicates the group of each player. Table: Matches +---------------+---------+ | Column Name | Type | +---------------+---------+ | match_id | int | | first_player | int | | second_player | int | | first_score |</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1384. Total Sales Amount by Year</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/total-sales-amount-by-year/</link>
      <pubDate>Tue, 06 Dec 2022 09:05:48 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/total-sales-amount-by-year/</guid>
      <description>題目 Table: Product +---------------+---------+ | Column Name | Type | +---------------+---------+ | product_id | int | | product_name | varchar | +---------------+---------+ product_id is the primary key for this table. product_name is the name of the product. Table: Sales +---------------------+---------+ | Column Name | Type | +---------------------+---------+ | product_id | int | | period_start | date | | period_end | date | | average_daily_sales | int | +---------------------+---------+ product_id</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 1479. Sales by Day of the Week</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/sales-by-day-of-the-week/</link>
      <pubDate>Tue, 06 Dec 2022 08:37:04 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/sales-by-day-of-the-week/</guid>
      <description>題目 Table: Orders +---------------+---------+ | Column Name | Type | +---------------+---------+ | order_id | int | | customer_id | int | | order_date | date | | item_id | varchar | | quantity | int | +---------------+---------+ (ordered_id, item_id) is the primary key for this table. This table contains information on the orders placed. order_date is the date item_id was ordered by the customer with id customer_id. Table: Items</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard]1972. First and Last Call On the Same Day</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/first-and-last-call-on-the-same-day/</link>
      <pubDate>Tue, 06 Dec 2022 05:39:34 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/first-and-last-call-on-the-same-day/</guid>
      <description>題目 Table: Calls +--------------+----------+ | Column Name | Type | +--------------+----------+ | caller_id | int | | recipient_id | int | | call_time | datetime | +--------------+----------+ (caller_id, recipient_id, call_time) is the primary key for this table. Each row contains information about the time of a phone call between caller_id and recipient_id. Write an SQL query to report the IDs of the users whose first and last calls on</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 2004. The Number of Seniors and Juniors to Join the Company</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/the-number-of-seniors-and-juniors-to-join-the-company/</link>
      <pubDate>Mon, 05 Dec 2022 09:07:42 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/the-number-of-seniors-and-juniors-to-join-the-company/</guid>
      <description>題目 Table: Candidates +-------------+------+ | Column Name | Type | +-------------+------+ | employee_id | int | | experience | enum | | salary | int | +-------------+------+ employee_id is the primary key column for this table. experience is an enum with one of the values (&amp;#39;Senior&amp;#39;, &amp;#39;Junior&amp;#39;). Each row of this table indicates the id of a candidate, their monthly salary, and their experience. A company wants to hire</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 2153. The Number of Passengers in Each Bus II</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/the-number-of-passengers-in-each-bus-ii/</link>
      <pubDate>Mon, 05 Dec 2022 08:34:19 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/the-number-of-passengers-in-each-bus-ii/</guid>
      <description>題目 Table: Buses +--------------+------+ | Column Name | Type | +--------------+------+ | bus_id | int | | arrival_time | int | | capacity | int | +--------------+------+ bus_id is the primary key column for this table. Each row of this table contains information about the arrival time of a bus at the LeetCode station and its capacity (the number of empty seats it has). No two buses will arrive</description>
    </item>
    
    <item>
      <title>[leetcode][Database][Hard] 2252. Dynamic Pivoting of a Table</title>
      <link>https://blog.zhengweiliu.com/posts/leetcode/database/dynamic-pivoting-of-a-table/</link>
      <pubDate>Mon, 05 Dec 2022 08:12:40 +0000</pubDate>
      
      <guid>https://blog.zhengweiliu.com/posts/leetcode/database/dynamic-pivoting-of-a-table/</guid>
      <description>題目 Table: Products +-------------+---------+ | Column Name | Type | +-------------+---------+ | product_id | int | | store | varchar | | price | int | +-------------+---------+ (product_id, store) is the primary key for this table. Each row of this table indicates the price of product_id in store. There will be at most 30 different stores in the table. price is the price of the product at this store.</description>
    </item>
    
  </channel>
</rss>
